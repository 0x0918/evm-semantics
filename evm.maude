fmod EVM-WORLD is
    protecting QID .
    protecting NAT .

    sorts Nonce Wei Hash .
    subsort Nat < Nonce .
    subsort Nat < Wei .
    subsort Nat < Hash .

    sorts AccountID AccountField .
    subsort Qid < AccountID .
    sorts Account Accounts .
    subsort Account < Accounts .

    op nonce[_]       : Nonce -> AccountField .
    op balance[_]     : Wei   -> AccountField .
    op storageRoot[_] : Hash  -> AccountField .
    op codeHash[_]    : Hash  -> AccountField .

    op __ : AccountField AccountField -> AccountField [assoc comm] .

    op _|->_ : AccountID AccountField -> Account .

    op mt  : -> Accounts .
    op _;_ : Accounts Accounts -> Accounts [assoc comm id: mt prec 60] .
endfm

fmod EVM-CODE is
    protecting EVM-WORLD .
    protecting NAT .

    sorts CodeLabel Constant Value .
    subsorts CodeLabel Constant AccountID < Value .
    subsort Nat < Constant .

    sorts OpCode Program .

    --- stack operators
    ops ADD MUL SUB DIV SDIV MOD SMOD ADDMOD MULMOD EXP SIGNEXTEND LT GT SLT SGT
        EQ ISZERO AND OR XOR NOT BYTE SHA3 POP
        : -> OpCode .

    op PUSH[_] : Nat -> OpCode .
    op DUP[_]  : Nat -> OpCode .
    op SWAP[_] : Nat -> OpCode .
    --- PUSH[1-32], DUP[1-16], SWAP[1-16]

    --- accessors
    ops ADDRESS BALANCE ORIGIN CALLER CALLVALUE CALLDATALOAD CALLDATASIZE
        CALLDATACOPY CODESIZE CODECOPY GASPRICE EXTCODESIZE EXTCODECOPY
        MSIZE BLOCKHASH COINBASE TIMESTAMP NUMBER DIFFICULTY GASLIMIT PC GAS
        : -> OpCode .

    op LOG[_]  : Nat -> OpCode .
    --- LOG[0-4]

    --- memory operations
    ops MLOAD MSTORE MSTORES SLOAD SSTORE
        : -> OpCode .

    --- control flow
    ops JUMP JUMP1 JUMPDEST CREATE CALL CALLCODE RETURN DELEGATECALL SUICIDE
        : -> OpCode .

    op skip : -> Program .
    op _:_  : Nat OpCode -> Program .
    op _;_  : Program Program -> Program [assoc comm id: skip] .
endfm

fmod EVM-MEM is
    protecting EVM-CODE .

    sort Value? .
    subsort Value < Value? .

    sorts Mem MemAddr MemRange .
    subsorts Nat < MemAddr .

    sorts ValueStack ValueStack? .
    subsort ValueStack < ValueStack? .

    op mt : -> Mem .
    op __ : Value Mem -> Mem [prec 40] .

    op _[_]    : Mem MemAddr -> Value .
    op _[_:=_] : Mem MemAddr Value -> Mem .

    vars N N' : Nat .
    vars A A' : MemAddr .
    vars V V' : Value .
    var M : Mem .

    eq mt[A]             = 0 .
    eq (V M)[0]          = V .
    eq (V M)[s(N)]       = M[N] .
    eq (V M)[0 := V']    = V' M .
    eq (V M)[s(N) := V'] = V (M[N := V']) .

    op _:_     : MemAddr MemAddr -> MemRange .
    op _[_]    : Mem MemRange -> Mem .
    op _[_:=_] : Mem MemRange Mem -> Mem .

    ceq M[N : N']           = mt if N' <= N .
    eq  (V M)[s(N) : s(N')] = M[N : N'] .
    eq  (V M)[0 : s(N')]    = V (M[0 : N']) .
    eq  mt[0 : s(N')]       = 0 (mt[0 : N']) .

    op .ValueStack : -> ValueStack .
    op _:_         : Value  ValueStack -> ValueStack .
    op _[_]        : OpCode ValueStack -> ValueStack? .
endfm

fmod EVM-STATE is
    protecting EVM-MEM .

    sorts PC .

    op pc : Nat -> PC .

    var V  : Value .
    var VS : ValueStack .

    eq POP [ V : VS ] = VS .
    ---eq ADD [

--- eq pop [ V : S ] = S .
--- eq bne [ V1 : V2 : S ] | pc(N) = S | pc(if V1 == 0 then s(N) else V2 fi) .

---    op _,_,_,_    : EVMCode PC ValueStack RAM -> CallState .
---    op _,_        : Nat Address -> CallID .
---    op <_,_>      : CallID CallState -> CallFrame .
---
---    op .CallStack : -> CallStack .
---    op _:_        : CallFrame CallStack -> CallStack [right id: .CallStack] .

endfm

---(
fmod EVM-EVM is
    protecting EVM-WORLD .
    protecting NAT .
endfm


fmod EVM-TRANSACTION is
    protecting NAT .
    protecting EVM-ACCOUNT .

    sort Gas .
    subsort Nat < Gas .

    sorts PreTX CreationTX MsgTX Transaction .
    subsorts CreationTX MsgTX < Transaction .
    sort Sig .
    subsort Qid < Sig .
    sorts EVMCode MsgData .
    subsorts Qid < EVMCode MsgData .

    op nonce[_] gasPrice[_] gasLimit[_] to[_] value[_] v[_] r[_] s[_]
        : Nat Gas Gas Address Nat Sig Sig Sig -> PreTX .

    op _ init[_] : PreTX EVMCode -> CreationTX .
    op _ data[_] : PreTX MsgData -> MsgTX .
endfm

fmod EVM-BLOCK is
    protecting NAT .
    protecting EVM-TRANSACTION .

    sorts Block BlockField BlockHeader .
    subsort BlockField < BlockHeader .

    sort BlockNumber .
    subsort Nat < BlockNumber .

    sorts BloomFilter Difficulty Time 32Byte OmmerHeaders .

    sort TransactionList .
    subsort Transaction < TransactionList .

    op NH : -> BlockNumber .

    op mt  : -> TransactionList .
    op _,_ : TransactionList TransactionList -> TransactionList [assoc id: mt] .

    op parentHash[_]   : Hash        -> BlockField .
    op ommersHash[_]   : Hash        -> BlockField .
    op stateRoot[_]    : Hash        -> BlockField .
    op txRoot[_]       : Hash        -> BlockField .
    op receiptsRoot[_] : Hash        -> BlockField .
    op mixHash[_]      : Hash        -> BlockField .
    op beneficiary[_]  : Address     -> BlockField .
    op logsBloom[_]    : BloomFilter -> BlockField .
    op difficulty[_]   : Difficulty  -> BlockField .
    op number[_]       : BlockNumber -> BlockField .
    op gasLimit[_]     : Gas         -> BlockField .
    op gasUsed[_]      : Gas         -> BlockField .
    op timeStamp[_]    : Time        -> BlockField .
    op extraData[_]    : 32Byte      -> BlockField .
    op nonce[_]        : Nat         -> BlockField .

    op mt : -> BlockHeader .
    op __ : BlockHeader BlockHeader -> BlockHeader [assoc comm] .

    op {_,_,_}      : BlockHeader OmmerHeaders TransactionList -> [Block] .
    op Block{_,_,_} : BlockHeader OmmerHeaders TransactionList -> Block .

    vars H1 H2 H3 H4 H5 H6 : Hash .
    vars G1 G2 : Gas .
    var Addr : Address .
    var BF : BloomFilter .
    var D : Difficulty .
    var BN : BlockNumber .
    var t : Time .
    var d : 32Byte .
    var N : Nat .
    var OH : OmmerHeaders .
    var TL : TransactionList .

    ceq { parentHash[H1] ommersHash[H2] stateRoot[H3] txRoot[H4] receiptsRoot[H5] mixHash[H6]
          beneficiary[Addr] logsBloom[BF] difficulty[D] number[BN]
          gasLimit[G1] gasUsed[G2] timeStamp[t] extraData[d] nonce[N]
        , OH
        , TL
        }
        = Block{ parentHash[H1] ommersHash[H2] stateRoot[H3] txRoot[H4] receiptsRoot[H5] mixHash[H6]
                 beneficiary[Addr] logsBloom[BF] difficulty[D] number[BN]
                 gasLimit[G1] gasUsed[G2] timeStamp[t] extraData[d] nonce[N]
               , OH
               , TL
               }
        if true .  --- here we put other block validation properties (instead of true)

endfm
)---
