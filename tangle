#!/usr/bin/env bash

progress() { echo "==== $@"; }

tangle_defn() {
    progress "Generating 'k/*' files"

    pandoc-tangle --from markdown --to code-k --code k data.md        > k/data.k
    pandoc-tangle --from markdown --to code-k --code k evm.md         > k/evm.k
    pandoc-tangle --from markdown --to code-k --code k evm-dasm.md    > k/evm-dasm.k
    pandoc-tangle --from markdown --to code-k --code k ethereum.md    > k/ethereum.k
}

tangle_kompile() {
    progress "kompiling definition"
    pushd k
    kompile --debug --main-module ETHEREUM-SIMULATION --syntax-module ETHEREUM-SIMULATION ethereum.k
    result="$?"
    popd
    return "$result"
}

tangle_generate_tests() {
    progress "Generating tests"
    if [[ ! -d  "tests/tests-develop" ]]; then 
        pushd tests
        TESTURL=https://github.com/ethereum/tests/archive/develop.zip
        ARCHIVE=develop
        EXTENSION=.zip


        progress "Downloading and unpacking tests ..."
        curl -OL "$TESTURL" && unzip "$ARCHIVE$EXTENSION" && rm "$ARCHIVE$EXTENSION"
        progress "Desugaring"
        ./desugar
        popd
    fi
}

tangle_test() {
    progress "Running tests"
    [[ $# == 0 ]] && set '*'
    for exp in "$@"; do
        find tests/tests-develop/VMTests/ -iname "$exp" -name '*.kson'  \
            -printf ' - %f\n' \
            -exec krun --debug --directory k/ {} \;
    done
}

tangle_ktest() {
    progress "running ktest ..."

    pushd k
    ktest ../tests/config.xml
    popd
}

[[ "$#" == '0' ]] && set all

while [[ "$#" -gt '0' ]]; do
    tangle_command="$1" && shift
    case "$tangle_command" in
        all)      set defn kompile test ;;
        defn)     tangle_defn ;;
        kompile)  tangle_kompile ;;
        testgen)  tangle_generate_tests ;;
        test)     tangle_test "$@" ; exit ;;
        ktest)    tangle_ktest ;;
        *)        echo "Unrecognized option: '$tangle_command' ..." ;;
    esac
done
