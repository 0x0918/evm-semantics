#!/usr/bin/env bash

set -e      # Exit immediately if any command fails

progress() { echo "==== $@"; }
success()  { echo -e "\e[32m==== success: $@\e[0m"; }
failure()  { echo -e "\e[31m==== failure: $@\e[0m"; }

tangle_generate_tests() {
    progress "Generating tests"
    if [[ ! -d  "tests/tests-develop" ]]; then 
        pushd tests
        TESTURL=https://github.com/ethereum/tests/archive/develop.zip
        ARCHIVE=develop
        EXTENSION=.zip


        progress "Downloading and unpacking tests ..."
        curl -OL "$TESTURL" && unzip "$ARCHIVE$EXTENSION" && rm "$ARCHIVE$EXTENSION"
        progress "Desugaring"
        ./desugar
        popd
    fi
}

list_tests() {
    for exp in "$@"; do
        if [[ -f "$exp" ]]; then
            echo $exp;
        else
            find tests/tests-develop/VMTests/ -iname "$exp" -type f
        fi
    done
}

tangle_test() {
    progress "Running tests"
    output_file="tests/templates/output.txt"

    local test_file test_fail_count=0
    list_tests "$@" | sort |
    while read test_file; do
        local output_differs=false
        progress "running: $test_file..."
        diff <(krun --debug --directory k/ "$test_file") "$output_file" \
            || output_differs=true
        if $output_differs; then
            failure "$test_file"
            test_fail_count+=1
        else
            success "$test_file"
        fi
    done
    return $test_fail_count
}

tangle_ktest() {
    progress "running ktest ..."

    pushd k
    ktest ../tests/config.xml
    popd
}

[[ "$#" == '0' ]] && set all

while [[ "$#" -gt '0' ]]; do
    tangle_command="$1" && shift
    case "$tangle_command" in
        all)      make -s all; set test "$@" ;;
        defn)     make -s defn ;;
        kompile)  make -s build ;;
        testgen)  tangle_generate_tests ;;
        test)     tangle_test "$@" ; exit ;;
        ktest)    tangle_ktest ;;
        *)        echo "Unrecognized option: '$tangle_command' ..." ;;
    esac
done
