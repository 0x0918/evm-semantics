#!/usr/bin/env bash

tangle_defn() {
    echo "generating 'k/*' files ..."
    echo "=========================="

    pandoc-tangle --from markdown --to code-k --code k data.md        > k/data.k
    pandoc-tangle --from markdown --to code-k --code k evm.md         > k/evm.k
    pandoc-tangle --from markdown --to code-k --code k evm-dasm.md    > k/evm-dasm.k
    pandoc-tangle --from markdown --to code-k --code k ethereum.md    > k/ethereum.k
}

tangle_kompile() {
    echo "kompiling definition ..."
    echo "========================"

    pushd k
    kompile --debug --main-module ETHEREUM-SIMULATION --syntax-module ETHEREUM-SIMULATION ethereum.k
    result="$?"
    popd
    return "$result"
}

tangle_generate_tests() {
    echo "generating tests ..."
    echo "===================="

    if [[ ! -d  "tests/ethereum-tests" ]]; then 
        cd tests
        TESTURL=https://github.com/ethereum/tests/archive/develop.zip
        ARCHIVE=develop
        EXTENSION=.zip
        curl -OL "$TESTURL" && unzip "$ARCHIVE$EXTENSION" && rm "$ARCHIVE$EXTENSION"
    fi
}

tangle_test() {
    echo "running tests ..."
    echo "================="

    krun --debug --directory k/ tests/ethereum-tests/VMTests/vmArithmeticTest.json
}

[[ "$#" == '0' ]] && set all

while [[ "$#" -gt '0' ]]; do
    tangle_command="$1" && shift
    case "$tangle_command" in
        all)      set defn kompile gentest test ;;
        defn)     tangle_defn ;;
        kompile)  tangle_kompile ;;
        testgen)  tangle_generate_tests ;;
        test)     tangle_test ;;
        *)        echo "Unrecognized option: '$tangle_command' ..." ;;
    esac
done
